// objects:grid

@use "sass:math";

$grid: (
  col        : 12,
  gutter-y   : 2.4rem,
  gutter-x   : 2.4rem
);


@function grid($key) {
  @if map-has-key($grid, $key) {
    @return map-get($grid, $key);
  }

  @warn "Unknown `#{$key}` in $grid.";
  @return null;
}


.o-row {
  display: flex;
  flex-wrap: wrap;
  margin-left: calc(#{grid(gutter-x)} * -1);
}

.o-row--no-gutter {
  margin-left: 0;
}

.o-col {
  //padding-bottom: grid(gutter-y);
  padding-left: grid(gutter-x);
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
}

.o-col--no-gutter {
  padding-left: 0;
}

// o-col
@for $i from 1 through grid(col) {
  .o-col--#{$i} {
    width: percentage(math.div($i, grid(col)));
    flex: 0 0 percentage(math.div($i, grid(col)));
  }
}


@each $bp, $bp_value in $breakpoints {
  @for $i from 0 through grid(col) {
    @include mq(#{$bp_value}) {
      .o-col--#{$i}\@#{$bp} {
        width: percentage(math.div($i, grid(col)));
        flex: 0 0 percentage(math.div($i, grid(col)));
      }
    }
  }
}

// o-col-offset
@for $i from 1 through grid(col) {
  .o-col--offset-#{$i} {
    margin-left: calc((100% / #{grid(col)}) * #{$i});
  }
}

@each $bp, $bp_value in $breakpoints {
  @for $i from 0 through grid(col) {
    @include mq(#{$bp_value}) {
      .o-col--offset-#{$i}\@#{$bp} {
        margin-left: calc((100% / #{grid(col)}) * #{$i});
      }
    }
  }
}
